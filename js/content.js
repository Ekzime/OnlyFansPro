// Content Script –¥–ª—è OnlyFans Manager Pro
// –ë–ï–ó–û–ü–ê–°–ù–´–ô —Ä–µ–∂–∏–º - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏

console.log('üéØ OnlyFans Manager Pro - Content script –∑–∞–≥—Ä—É–∂–µ–Ω');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let authToken = null;
let userAgent = null;
let isInitialized = false;

// API endpoints OnlyFans
const API_ENDPOINTS = {
    sendMessage: '/api2/v2/chats/sendMessage',
    getUser: '/api2/v2/users/profile',
    getChatId: '/api2/v2/chats/getChatId'
};

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç background script
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    console.log('üì® Content script –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:', message.type);
    
    handleMessage(message)
        .then(response => {
            console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', response);
            sendResponse(response);
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ content script:', error);
            sendResponse({ success: false, error: error.message });
        });
    
    return true;
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(message) {
    switch (message.type) {
        case 'SCAN_FANS':
            return await scanFans();
            
        case 'SEND_MESSAGE':
            return await sendMessageAPI(message.data);
            
        case 'CHECK_PAGE':
            return await checkPageType();
            
        default:
            throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.type}`);
    }
}

// –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
async function initializeAPIWhenNeeded() {
    if (authToken) return true; // –£–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    
    console.log('üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é...');
    
    try {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω
        authToken = await findAuthTokenSafely();
        userAgent = navigator.userAgent;
        
        if (authToken) {
            console.log('‚úÖ API —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω');
            return true;
        } else {
            console.log('‚ÑπÔ∏è API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DOM –º–µ—Ç–æ–¥');
            return false;
        }
        
    } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ API —Ç–æ–∫–µ–Ω:', error.message);
        return false;
    }
}

// –ë–ï–ó–û–ü–ê–°–ù–´–ô –ø–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ (–Ω–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π)
async function findAuthTokenSafely() {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ–≤–∏–¥–Ω—ã–µ –º–µ—Å—Ç–∞
        let token = localStorage.getItem('auth_token') || 
                   sessionStorage.getItem('auth_token');
        
        if (token) return token;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ localStorage –ø—É—Å—Ç
        token = getCookieValue('auth_token') || getCookieValue('session_token');
        if (token) return token;
        
        // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ - –∏—â–µ–º –≤ window –æ–±—ä–µ–∫—Ç–µ
        if (window.__INITIAL_STATE__ && window.__INITIAL_STATE__.auth) {
            return window.__INITIAL_STATE__.auth.token;
        }
        
        return null;
        
    } catch (error) {
        // –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - –Ω–µ —Ö–æ—Ç–∏–º –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ
        return null;
    }
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ cookie
function getCookieValue(name) {
    try {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) {
            return parts.pop().split(';').shift();
        }
        return null;
    } catch (error) {
        return null;
    }
}

// –ë–´–°–¢–†–ê–Ø –û–¢–ü–†–ê–í–ö–ê —á–µ—Ä–µ–∑ API (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ)
async function sendMessageAPI(messageData) {
    console.log('üöÄ –ü–æ–ø—ã—Ç–∫–∞ API –æ—Ç–ø—Ä–∞–≤–∫–∏:', messageData.name);
    
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å
        const apiReady = await initializeAPIWhenNeeded();
        
        if (!apiReady) {
            console.log('üîÑ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ DOM –º–µ—Ç–æ–¥');
            return await sendMessageDOM(messageData);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        const chatId = await getChatId(messageData.username);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const response = await sendMessageDirectly(chatId, messageData.processedMessage);
        
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ API');
        
        return {
            success: true,
            recipient: messageData.username,
            message: messageData.processedMessage,
            method: 'API'
        };
        
    } catch (error) {
        console.log('üîÑ API –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ DOM –º–µ—Ç–æ–¥:', error.message);
        return await sendMessageDOM(messageData);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞
async function getChatId(username) {
    const response = await fetch('/api2/v2/chats/getChatId', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${authToken}`,
            'User-Agent': userAgent,
            'X-Requested-With': 'XMLHttpRequest'
        },
        body: JSON.stringify({
            username: username
        })
    });
    
    if (!response.ok) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å chat ID: ${response.status}`);
    }
    
    const data = await response.json();
    return data.chatId || data.id;
}

// –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessageDirectly(chatId, message) {
    const response = await fetch('/api2/v2/chats/sendMessage', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${authToken}`,
            'User-Agent': userAgent,
            'X-Requested-With': 'XMLHttpRequest'
        },
        body: JSON.stringify({
            chatId: chatId,
            message: message,
            type: 'text'
        })
    });
    
    if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${response.status}`);
    }
    
    return await response.json();
}

// Fallback DOM –º–µ—Ç–æ–¥ (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π)
async function sendMessageDOM(messageData) {
    console.log('üêå DOM –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageData.name);
    
    try {
        // –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const fanElement = await findFanElement(messageData.username);
        
        if (!fanElement) {
            throw new Error(`–§–∞–Ω ${messageData.username} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ`);
        }
        
        // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        const messageButton = fanElement.querySelector('a[href*="/my/chats/chat/"]');
        if (!messageButton) {
            throw new Error('–ö–Ω–æ–ø–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        console.log('üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è...');
        messageButton.click();
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–∞—Ç–∞
        await waitForChatPage();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await typeAndSendMessage(messageData.processedMessage);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ñ–∞–Ω–∞—Ç–æ–≤
        window.history.back();
        await delay(1000);
        
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ DOM');
        
        return {
            success: true,
            recipient: messageData.username,
            message: messageData.processedMessage,
            method: 'DOM'
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ DOM –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        throw error;
    }
}

// –ë–ï–ó–û–ü–ê–°–ù–û–ï —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–Ω–∞—Ç–æ–≤
async function scanFans() {
    console.log('üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–Ω–∞—Ç–æ–≤...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if (!window.location.href.includes('/collections/user-lists/subscribers')) {
            throw new Error('–ù–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ñ–∞–Ω–∞—Ç–æ–≤');
        }
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–Ω–∞—Ç–æ–≤
        await loadAllFansSafely();
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const fans = await extractFansData();
        
        console.log('üë• –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–Ω–∞—Ç–æ–≤:', fans.length);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ background script
        await chrome.runtime.sendMessage({
            type: 'FANS_FOUND',
            data: fans
        });
        
        return {
            success: true,
            fansCount: fans.length,
            onlineCount: fans.filter(f => f.isOnline).length
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        throw error;
    }
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–Ω–∞—Ç–æ–≤
async function loadAllFansSafely() {
    console.log('‚ö° –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–Ω–∞—Ç–æ–≤...');
    
    let lastCount = 0;
    let attempts = 0;
    const maxAttempts = 15; // –ú–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    while (attempts < maxAttempts) {
        const currentCount = document.querySelectorAll('.b-users__item.m-fans').length;
        
        if (currentCount > lastCount) {
            lastCount = currentCount;
            attempts = 0;
        } else {
            attempts++;
        }
        
        // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        window.scrollTo({
            top: document.body.scrollHeight,
            behavior: 'smooth'
        });
        
        await delay(200); // –ë–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${currentCount}`);
    }
    
    window.scrollTo({ top: 0, behavior: 'smooth' });
    console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async function extractFansData() {
    const fanElements = document.querySelectorAll('.b-users__item.m-fans');
    const fans = [];
    
    fanElements.forEach(fanElement => {
        try {
            const nameElement = fanElement.querySelector('[at-attr="custom_name"]');
            const handleElement = fanElement.querySelector('[at-attr="user_link"] .g-user-username');
            const isOnline = fanElement.querySelector('.online_status_class.online') !== null;
            
            const name = nameElement ? nameElement.textContent.trim() : 'Unknown';
            let username = 'unknown';
            
            if (handleElement) {
                username = handleElement.textContent.trim().replace('@', '');
            }
            
            fans.push({
                name: name,
                username: username,
                isOnline: isOnline,
                recentlyOnline: false,
                avatarUrl: null,
                profileUrl: `https://onlyfans.com/${username}`,
                lastSeen: isOnline ? Date.now() : null
            });
            
        } catch (error) {
            // –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        }
    });
    
    return fans;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function findFanElement(username) {
    const fanElements = document.querySelectorAll('.b-users__item.m-fans');
    
    for (const fanElement of fanElements) {
        const handleElement = fanElement.querySelector('[at-attr="user_link"] .g-user-username');
        if (handleElement) {
            const fanUsername = handleElement.textContent.trim().replace('@', '');
            if (fanUsername === username) {
                return fanElement;
            }
        }
    }
    
    return null;
}

async function waitForChatPage() {
    return new Promise((resolve, reject) => {
        const checkInterval = setInterval(() => {
            if (window.location.href.includes('/my/chats/chat/')) {
                const messageForm = document.querySelector('.b-chat__message-form textarea');
                if (messageForm) {
                    clearInterval(checkInterval);
                    resolve();
                }
            }
        }, 200);
        
        setTimeout(() => {
            clearInterval(checkInterval);
            reject(new Error('–¢–∞–π–º-–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞'));
        }, 8000);
    });
}

async function typeAndSendMessage(message) {
    const messageInput = document.querySelector('.b-chat__message-form textarea');
    const sendButton = document.querySelector('.b-chat__message-form [type="submit"]');
    
    messageInput.focus();
    messageInput.value = message;
    messageInput.dispatchEvent(new Event('input', { bubbles: true }));
    
    await delay(300);
    sendButton.click();
    await delay(500);
}

async function checkPageType() {
    const url = window.location.href;
    const isFansPage = url.includes('/collections/user-lists/subscribers');
    
    return {
        success: true,
        pageType: isFansPage ? 'fans' : 'other',
        url: url
    };
}

// –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function initialize() {
    console.log('üöÄ OnlyFans Manager Pro –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    
    // –ù–ï –ò–ó–í–õ–ï–ö–ê–ï–ú –¢–û–ö–ï–ù–´ –ü–†–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò!
    // –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–∞–µ–º —á—Ç–æ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ
    
    if (window.location.href.includes('/collections/user-lists/subscribers')) {
        chrome.runtime.sendMessage({
            type: 'CONTENT_READY',
            data: { pageType: 'fans' }
        }).catch(() => {});
    }
    
    isInitialized = true;
}

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initialize);
} else {
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ
    setTimeout(initialize, 1000);
} 